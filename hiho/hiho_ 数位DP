#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;

const int MAXBIT = 20; 
const long long mod = 1000000007;
struct  node{
	long long s,n; // sum and counts of numbers
	node():s(0),n(0){}
	node(long long ss,long long nn):s(ss),n(nn){}
};

long long base[MAXBIT];
long long l,r,k,bit[MAXBIT],bt,yy;

node dp[MAXBIT][400]; 

node DFS (long long pos,long long target, bool limit)
{
	node t;
	if(!pos){
		if(target==100) t.n=1;
		return t;
	}
	if(!limit && dp[pos][target].n!=-1) return dp[pos][target];
	
	long long head=0, tail=9, sgn=1;;
	if(pos==yy) head=1;
	if(limit) tail = bit[pos];
	if((yy-pos)%2) sgn=-1;
	for (int i=head; i<=tail; ++i){
		node tmp = DFS(pos-1, target-i*sgn, limit==1&&i==bit[pos]);
		if(tmp.n){
			t.n += tmp.n;
			long long q=((((tmp.n%mod)*base[pos])%mod)*i)%mod;
			t.s = (t.s + tmp.s)%mod; // pre add , dp[pos-1][]
			t.s = (t.s + q) %mod;  // current add
		}
	}	
	if(!limit) dp[pos][target]=t;
	return t;
}

long long cal(long long x, long long y){
	long long ans = 0;
	if(x==-1||x==0) return 0;
	bt = 0;
	while (x){
		bt++;
		bit[bt]=x%10;
		x/=10;
	}
	for (yy=1; yy<=bt; ++yy){
		memset(dp,-1,sizeof(dp)); 
		ans += DFS(yy, y+100, yy==bt).s;
		ans = (ans+mod)%mod;
	}
	return ans;
}

int main()
{
	base[1] = 1;
	for (int i=2; i<=19; ++i)
		base[i]=(base[i-1]*10)%mod;
	cin >> l >> r >> k;
		cout << (cal(r,k)-cal(l-1,k)+mod)%mod << endl;
	return 0;
}
