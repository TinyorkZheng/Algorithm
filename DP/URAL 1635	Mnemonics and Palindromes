/* ÌâÒâ£º¸ø³öÒ»¸ö³¤ÎªnµÄ½öÓÉÐ¡Ð´Ó¢ÎÄ×ÖÄ¸×é³ÉµÄ×Ö·û´®£¬ÇóËüµÄ»ØÎÄ´®»®·ÖµÄÔªËØµÄ×îÐ¡¸öÊý£¬²¢°´Ë³ÐòÊä³ö´Ë»®·Ö·½°¸*/ 
#include <iostream>
#include <cstdio> 
#include <cstdlib>
#include <cstring>
#include <string> 
#include <vector> 
using namespace std;
const int N = 4005; 
const int INF = 10000000;

int n; 

int main()
{
 string tmps;
    while(cin >> tmps)
    {
	    // init  
        n = tmps.size();
		vector<int> dp(n+1),pre(n+1,-1),flag(n+1,0);
		vector<vector<bool> > vis(n+1,vector<bool>(n+1,false));
        
        // pre 
        for(int i = 0; i < n; i++){
      		for(int j = 1; ; j++){
				if(i-j<0||i+j>=n) break;
            	if(tmps[i-j] != tmps[i+j]) break;
            	vis[i-j][i+j] = true;
  		    }
            for(int j = 1; ; j++){
          		if(i-j+1<0||i+j>=n) break;
            	if(tmps[i-j+1] != tmps[i+j]) break;
            	vis[i-j+1][i+j] = true;
      		}
  		}
        // DP initial statement
        for(int i = 0; i <= n; i++)  dp[i] = INF;
        for(int i = 0; i < n; i++) vis[i][i] = 1;
        dp[0] = 1;
        
		for(int i = 0; i < n; i++) {
            if(vis[0][i]) {
                dp[i] = 1;
                pre[i] = 0;
            }
        }
        for(int i=0;i<n;i++){
            if(dp[i]==1) continue;
            for(int j=0;j<i;j++){
                if(vis[j+1][i]){
                    if(dp[i]>dp[j]+1) {
                        dp[i]=dp[j]+1;
                        pre[i]=j+1;
                    }
                }
            }
        }
        // output size 
        cout<<dp[n-1]<<endl;
        
        int p = pre[n-1]-1;
        if(p != n-1) flag[p] = 1;
        while(p != -1) {
            p = pre[p]-1; 
            if(p >= 0) flag[p] = 1;
        } 
        
        for(int i = 0; i < n; i++)  {
            cout<<tmps[i];
            if(flag[i])  cout<<" ";
        }
       cout << endl;
    }
}
